package frc.robot.subsystems;

// WPILib Core
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import edu.wpi.first.wpilibj.RobotState;

// Math & Geometry
import edu.wpi.first.math.geometry.Rotation2d;
import edu.wpi.first.math.geometry.Translation2d;
import edu.wpi.first.math.kinematics.ChassisSpeeds;
import edu.wpi.first.math.kinematics.SwerveDriveKinematics;
import edu.wpi.first.math.kinematics.SwerveModuleState;

// Hardware
import com.ctre.phoenix6.hardware.Pigeon2;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkLowLevel.MotorType;

// Project specific
import frc.robot.Constants;
import frc.robot.getInstance;

public class Mechanum extends SubsystemBase {
    private static Mecanum mechInstance;
    public pigeon2 gyro;
    private final SparkMax Spark_fl;
    private final SparkMax Spark_fr;
    private final SparkMax Spark_bl;
    private final SparkMax Spark_br;
}

public Mecanum () {
    spark_fl = new SparkMax(Constants.DrivetrainConstants.SPARK_FL.MotorType.kBrushless);
    spark_fr = new SparkMax(Constants.DrivetrainConstants.SPARK_FR.motorcontrol.kBrushless);
    spark_bl = new SparkMax(Constants.DrivetrainConstants.SPARK_BL.motorcontrol.kBrushless);
    spark_br = new SparkMax(Constants.DrivetrainConstants.SPARK_BR.motorcontrol.kBrushless);


    spark_fl.setInverted=(false);
    spark_bl.setInverted=(false);
    spark_fr.setInverted=(true);
    spark_br.setInverted=(true);

    gyro = new pigeon2(Constants.pigeonID);
    gyro.getConfigurator().apply(new Pigeon2Configuration);
    gyro.setYaw(0);
    gyro.reset();
    mech = new MechanumDrive(spark_fl, spark_fr, spark_bl, spark_br);
}
    public void driveMecanum(double fl, double fr, double bl, double br){
        spark_fl.set(fl);
        spark_fr.set(fr);
        spark_bl.set(bl);
        spark_br.set(br);
    }
    public Rotation2d getPigeonAngle(){
        return gyro.getRotation2d();
    }

    public MecanumDriveWheelPositions(){
        return new MecanumDriveWheelPositions(
            spark_fl.getEncoder().getPosition(),
            spark_fr.getEncoder().getPosition(),
            spark_bl.getEncoder().getPosition(),
            spark_br.getEncoder().getPosition()
        );
    }

    public void zeroGyro(){
        gyro.reset();
    }   

    public static Mecanum getInstance(){
        if (mechInstance == null){
            mechInstance = new Mecanum();
        }
        return mechInstance;
    }

    public void periodic() {

    }

    public void RobotOrientedDrive(double x, double y, double z) {
        mech.driveCartesian(y,x,z);
    }
